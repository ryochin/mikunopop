# 

use strict;
use warnings;
use lib qw(/web/mikunopop/lib);

use Plack::Builder;
use Plack::Request;
use Plack::Response;

use Path::Class qw(file);
use List::Util qw(first);
use List::MoreUtils qw(uniq);
use CGI;
use Config::Pit;
use Text::Xslate ();
use DateTime;
use DateTime::Format::MySQL;

use Mikunopop::Pnames;
use Mikunopop::Tags;
use Mikunopop::Schema;
use Mikunopop::Query2SQL;

use utf8;
use Encode ();

# setup
my $base_dir = '/web/mikunopop/';
my $var_dir = file( $base_dir, "var" );

my $template_file = file( $base_dir, "template", "count_search.html" )->stringify;

my $expire = 6 * 60 ** 2;    # 6hrs
my $last = 0;    # epoch

# db
my $code = 'utf8';
my $dbiconfig = {
	on_connect_do => [
		"SET CHARACTER SET $code",
		"SET NAMES $code",
	],
};

my $config = Config::Pit::pit_get("mysql/ryo", require => {
	username => "username",
	password => "password",
} );

my $schema = Mikunopop::Schema->connect("dbi:mysql:database=mikunopop", @{$config}{qw(username password)}, $dbiconfig ) or die DBI->errstr;

my $app = sub {
	my $req = Plack::Request->new(shift);

	# get count max
	my $count_max = 0;
	if( my ($video) = $schema->resultset('Video')->search( { }, { order_by => \ 'count DESC', columns => [ qw(count) ] } )->slice( 0, 1 ) ){
		$count_max = $video->count;
	}

	# tag list
	my $tag_list = {};
	my @tags = @{ $Mikunopop::Tags::Tags };
	for my $n( 0 .. scalar( @tags ) -1 ){
		$tag_list->{$n} = $tags[$n];
	}
	$tag_list->{""} = q/▼ タグ/;

	# cgi
	my $cgi = CGI->new;
	$cgi->charset('utf-8');

	my $stash = {};

	my @where;
	my @search_param;

	# date_from, date_to
	if( defined $req->param('date_from') and $req->param('date_from') ne '' ){
		my ($year, $month) = unpack "A4 A2", $req->param('date_from');
		if( my $date_from = eval { DateTime->new( time_zone => 'Asia/Tokyo', year => $year, month => $month )->truncate( to => 'month' ) } ){
			push @where, sprintf "first_retrieve >= '%s'", DateTime::Format::MySQL->format_datetime( $date_from );
		}
	}
	if( defined $req->param('date_to') and $req->param('date_to') ne '' ){
		my ($year, $month) = unpack "A4 A2", $req->param('date_to');
		if( my $date_to = eval { DateTime->new( time_zone => 'Asia/Tokyo', year => $year, month => $month )->add( days => 45 )->truncate( to => 'month' )->add( seconds => -1 ) } ){
			push @where, sprintf "first_retrieve <= '%s'", DateTime::Format::MySQL->format_datetime( $date_to );
		}
	}

	# from, to
	my $from = $stash->{from} = $req->param('from') // 30;
	my $to = $stash->{to} = $req->param('to') // $count_max;

	if( $from > $to ){
		($from, $to) = ($to, $from);
	}

	push @where, sprintf "count >= %d", $from;
	push @where, sprintf "count <= %d", $to;

	# query
	my $query = Encode::decode_utf8( $req->param('query') ) // "";
	if( $query ne '' ){
		my $q2s = Mikunopop::Query2SQL->new( query => $query );
		$q2s->method('AND');
		$q2s->eliminate_num(3);
		$q2s->column( [ qw(title pnames tags) ] );
		
		push @where, $q2s->sql;
		push @search_param, $q2s->param;
	
		$stash->{query} = $q2s->query;    # normalized
	}

	# tag
	my $tag = $req->param('tag') // "";
	if( $tag ne '' ){
		my $tag_name = $tag_list->{ $tag };
		
		my $q2s = Mikunopop::Query2SQL->new( query => $tag_name );
		$q2s->method('AND');
		$q2s->eliminate_num( 5 );
		$q2s->column( [ qw(tags) ] );
		$q2s->quote_with_colon( 1 );
		
		push @where, $q2s->sql;
		push @search_param, $q2s->param;
	}


	### order:

	my @order;
	my $order =  $req->param('order') // "count";
	if( $order eq "count" ){
		push @order, 'count DESC, first_retrieve ASC';
	}
	elsif( $order eq "first_retrieve" ){
		push @order, 'first_retrieve ASC, count DESC';
	}
	else{
		# default (=count)
		push @order, 'count DESC, first_retrieve ASC';
	}


	### search:

	my @need_column = qw(vid title length first_retrieve pnames tags count);

	# sql for search
	my $sql = sprintf "SELECT %s FROM video \n", join ',', @need_column;
	$sql .= sprintf "WHERE %s \n", join("\n AND ", @where);
	$sql .= sprintf "ORDER BY %s \n", join(', ', @order);

	my @video;
	my $sth1 = $schema->storage->dbh->prepare( $sql );
	my $total = $stash->{total} = $sth1->execute( @search_param ) or die $!;
	while( my $hash = $sth1->fetchrow_hashref ){
		push @video, $hash;
	}

	for my $video( @video ){
		# id
		( $video->{id} = $video->{vid} ) =~ s{^(sm|nm|so)}{}o;
		
		# title
		$video->{title} //= q{（削除済み？）};
		
		# pnames
		$video->{pnames} = [ grep { $_ ne '' } split ':', Encode::decode_utf8( $video->{pnames} ) ];
		$video->{has_pnames} = scalar @{ $video->{pnames} } > 0 ? 1 : 0;
		
		# tags
		$video->{tags} = [ grep { $_ ne '' } split ':', Encode::decode_utf8( $video->{tags} ) ];
		$video->{has_tags} = scalar @{ $video->{pnames} } > 0 ? 1 : 0;
		
		# count
		$video->{count} =~ tr/0-9/０-９/;
		
		# date
		if( defined $video->{first_retrieve} and $video->{first_retrieve} ne '' ){
			$video->{date} = sprintf "%04d年%02d月%02d日", split /[\-\:\s]+/, $video->{first_retrieve};
		}
		else{
			$video->{date} = "?";
		}
		
		# path
		$video->{audio_path} = &id2path( $video->{vid} );
		
		# set
		push @{ $stash->{video} }, $video;
	}

	# num check
	$stash->{too_many} = 1
		if $total > 500;


	### form:

	## date_from

	my $now = DateTime->now( time_zone => 'Asia/Tokyo' );
	
	my @range_opt;
	for my $year( 2007 .. $now->year ){
		my $list = {};
		for my $month( 1 .. 12 ){
			next if $year == 2007 && $month < 9;
			next if $year == $now->year && $month > $now->month;
			
			my $ym = sprintf "%04d%02d", $year, $month;
			$list->{ $ym } = sprintf "%04d年%02d月", $year, $month;
		}
		
		push @range_opt, $cgi->optgroup(
			-name => $year,
			-values => [ sort { $a <=> $b } keys %{ $list } ],
			-labels => $list,
		);
	}

	do {
		$stash->{form}->{date_from} = $cgi->popup_menu(
			-name => 'date_from',
			-id => 'date-from',
			-values => [ "", @range_opt ],
			-default =>scalar( $req->param('date_from') // "" ),
			-labels => { "" => q/▼ 〜から/ },
			-override => 1,
			-class => 'user-input',
		);
	};

	## date_to

	do {
		$stash->{form}->{date_to} = $cgi->popup_menu(
			-name => 'date_to',
			-id => 'date-to',
			-values => [ "", @range_opt ],
			-default =>scalar( $req->param('date_to') // "" ),
			-labels => { "" => q/▼ 〜まで/ },
			-override => 1,
			-class => 'user-input',
		);
	};


	## from

	# range
	my @range = reverse 1 .. $count_max;
	my $range_label = { map { $_ => sprintf "%d 回", $_ } @range };

	$stash->{form}->{from} = $cgi->popup_menu(
		-name => 'from',
		-id => 'from',
		-values => [ @range ],
		-default => $from,
		-labels => $range_label,
		-override => 1,
		-class => 'user-input',
	);

	## to

	$stash->{form}->{to} = $cgi->popup_menu(
		-name => 'to',
		-id => 'to',
		-values => [ @range ],
		-default => $to,
		-labels => $range_label,
		-override => 1,
		-class => 'user-input',
	);

	## tags

	$stash->{form}->{tag} = $cgi->popup_menu(
		-name => 'tag',
		-id => 'tag',
		-values => [ "", sort { $a <=> $b } grep { /^\d+$/o } keys %{ $tag_list } ],
		-default => $tag,
		-labels => $tag_list,
		-override => 1,
		-class => 'user-input',
	);

	## order
	
	my $order_list = {
		count => q{ミクノ度順},
		first_retrieve => q{投稿日順},
	};
	my @order_order = qw(count first_retrieve);

	$stash->{form}->{order} = $cgi->popup_menu(
		-name => 'order',
		-id => 'order',
		-values => [ @order_order ],
		-default => $order,
		-labels => $order_list,
		-override => 1,
		-class => 'user-input',
	);


	### vars::

	# etc
	$stash->{current_url} = $req->script_name;


	### output:

	# out
	my $xs = Text::Xslate->new(
		path => [ '/', file( $base_dir, "template" ) ],
		cache => 1,    # default
		cache_dir => file( $base_dir, "tmp" ),
		input_layer => ':utf8',    # default
		syntax => 'TTerse',
		type => 'html',
	);

	# output
	my $res = Plack::Response->new(200);
	$res->content_type("text/html; charset=UTF-8");
	$res->body( Encode::encode_utf8( $xs->render( $template_file, $stash ) ) );

	return $res->finalize;
};

sub id2path {
	my $id = shift;
	
	( my $vid = $id ) =~ s{^(sm|nm|so)}{}o;
	
	my $first = sprintf "%03d", int( $vid / 1000 / 1000 );
	my $second = sprintf "%03d", int( ( $vid - ( $first * 1000 ** 2 )  ) / 1000 );
	
	return file( $first , $second, sprintf "%s", $id );
}

__END__
