# 

use v5.10;
use strict;
use warnings;
use lib qw(/web/mikunopop/lib);

use Plack::Builder;
use Plack::Request;
use Plack::Response;

use Data::Dumper;
use Path::Class qw(file);
use List::Util qw(first max);
use List::MoreUtils qw(all);
use YAML::Syck ();
local $YAML::Syck::ImplicitUnicode = 1;    # utf8 flag on
use CGI;
use Config::Pit;

use Mikunopop::Pnames;
use Mikunopop::Tags;
use Mikunopop::Schema;

use utf8;
use Encode ();

my $base_dir = '/web/mikunopop/';
my $var_dir = file( $base_dir, "var" );

my $db_file = file( $var_dir, 'playlist.db' );
my $template_file = file( $base_dir, "template", "count_search.html" )->stringify;

my $expire = 6 * 60 ** 2;    # 6hrs
my $last = 0;    # epoch
my $count;    # count container
my $max = 0;    # count container

my $code = 'utf8';
my $dbiconfig = {
#	AutoCommit => 0,    # transaction
#	RaiseError => 1,
	on_connect_do => [
		"SET CHARACTER SET $code",
		"SET NAMES $code",
#		"SET SESSION senna_2ind=OFF",
	],
};

my $config = Config::Pit::pit_get("mysql/ryo", require => {
	username => "username",
	password => "password",
} );

my $schema = Mikunopop::Schema->connect("dbi:mysql:database=mikunopop", @{$config}{qw(username password)}, $dbiconfig ) or die DBI->errstr;

my $app = sub {
	my $req = Plack::Request->new(shift);

	# insert to memory
	if( time - $last > $expire ){
#		$req->logger->("=> count file reloaded.");
		$count = YAML::Syck::LoadFile( $db_file->stringify );
		
		# 前処理
		for my $video( @{ $count } ){
			$max = $video->{view}
				if $video->{view} > $max;
			
			$video->{title} = Encode::decode_utf8( $video->{title} );
		}
		
		$last = time;
	}

	my $cgi = CGI->new;
	$cgi->charset('utf-8');

	my $stash = {};

	# from, to
	my $from = $stash->{from} = int $req->param('from') || 20;
	my $to = $stash->{to} = int $req->param('to') || $max;

	if( $from > $to ){
		($from, $to) = ($to, $from);
	}

	# query
	my $query = ( defined $req->param('query') and $req->param('query') ne '' )
		? $req->param('query')
		: "";

	$query = Encode::decode_utf8( $query );

	my @query;
	if( $query ne '' ){
		$query =~ s/^\s+//o;
		$query =~ s/\s+$//o;
		
		@query = split /[\s　]+/o, $query;
		@query = splice @query, 0, 3 if scalar @query > 3;
		
		$query = join ' ', @query;
	}

	# tag
	my $tag = ( defined $req->param('tag') and $req->param('tag') ne '' )
		? $req->param('tag')
		: "";

	my $tag_list = {};
	my @tags = @{ $Mikunopop::Tags::Tags };
	for my $n( 0 .. scalar( @tags ) -1 ){
		$tag_list->{$n} = $tags[$n];
	}
	$tag_list->{""} = q/▼ タグ/;

	# prepare
	my @candidate;
	for my $video( @{ $count } ){
		next if $video->{view} < $from;
		next if $video->{view} > $to;
		
		push @candidate, $video->{id};
	}
	
	# get all
	my $where = {
		vid => { -in => [ @candidate ] }
	};
	
	my $video_list = {};    # vid => dbi obj
	for my $v( $schema->resultset('Video')->search( $where ) ){
		$video_list->{ $v->vid } = $v;
	}

	# main
	my @video;
	MAIN:
	for my $video( @{ $count } ){
#		next if $video->{view} < $from;
#		next if $video->{view} > $to;
		
		my $v = $video_list->{ $video->{id} } or next;
		
		# query
		if( scalar @query ){
			
			my $pnames = $v
				? Encode::decode_utf8( $v->pnames )
				: "";
			
			# 含む
			if( $pnames ne '' ){
				next MAIN if not all { $video->{title} =~ /$_/i  or $pnames =~ /$_/i } grep { ! /^-/ } @query;
			}
			else{
				next MAIN if not all { $video->{title} =~ /$_/i } grep { ! /^-/ } @query;
			}
			
			# 含まない
			for my $pattern( @query ){
				if( $pattern =~ /^-/o ){
					(my $pat = $pattern) =~ s/^-//o;
					next MAIN if $video->{title} =~ /$pat/;
					next MAIN if $pnames ne '' && $pnames =~ /$pat/;
				}
			}
		}
		
		# tag
		if( $tag ne '' ){
			next if not $v;
			my @tags = grep { $_ ne '' } split ':', Encode::decode_utf8( $v->tags );
			next if not first {  $_ =~ /^$tag_list->{ $tag }$/i } @tags;
		}
		
		# value
		$video->{pnames} = [];
		$video->{tags} = [];
		if( $v  ){
			# pnames
			$video->{pnames} = [ grep { $_ ne '' } split ':', Encode::decode_utf8( $v->pnames ) ];
			
			# tags
			$video->{tags} = [ grep { $_ ne '' } split ':', Encode::decode_utf8( $v->tags ) ];
			
			# etc
			for my $key( qw(length) ){
				$video->{$key} = $v->$key();
			}
		}
		
		push @video, $video;
	}

	# num
	$stash->{num} = scalar @video;
	$stash->{too_many} = 1
		if scalar @video > 500;

	$stash->{video} = [ @video ];
	$stash->{max} = $max;

	# range
	my @range = reverse 1 .. $max;
	my $range_label = { map { $_ => sprintf "%d 回", $_ } @range };

	# from
	$stash->{form}->{from} = $cgi->popup_menu(
		-name => 'from',
		-id => 'from',
		-values => [ @range ],
		-default => $from,
		-labels => $range_label,
		-override => 1,
		-class => 'user-input',
	);

	# to
	$stash->{form}->{to} = $cgi->popup_menu(
		-name => 'to',
		-id => 'to',
		-values => [ @range ],
		-default => $to,
		-labels => $range_label,
		-override => 1,
		-class => 'user-input',
	);


	# tags
	$stash->{form}->{tag} = $cgi->popup_menu(
		-name => 'tag',
		-id => 'tag',
		-values => [ "", sort { $a <=> $b } grep { /^\d+$/o } keys %{ $tag_list } ],
		-default => $tag,
		-labels => $tag_list,
		-override => 1,
		-class => 'user-input',
	);

	$stash->{query} = $query;

	# query
	# -> なぜか value が化ける
#	$stash->{form}->{query} = $cgi->textfield(
#		-name => 'query',
#		-id => 'query',
#		-default => $query,
#		-override => 0,
#		-size => 8,
#		-class => 'user-input',
#	);

	# etc
	$stash->{current_url} = $req->script_name;

	# out
	my $template = &create_template;

	my $output;
	$template->process( $template_file, $stash, \ $output, binmode => ':utf8' )
		or die ;

	my $res = Plack::Response->new(200);
	$res->content_type("text/html; charset=UTF-8");
	$res->body( Encode::encode_utf8( $output ) );

	return $res->finalize;
};

sub create_template {
	require Template;

	my $config = {
		INCLUDE_PATH => '.',
		ABSOLUTE => 1,
		RELATIVE => 1,
		AUTO_RESET => 1,
		ENCODING => 'utf8',    # will be passed to Encode::decode()
		PRE_CHOMP => 1,
		POST_CHOMP => 0,
		TRIM => 0,
	};

	my $tmpl_config = {
		%{ $config },
	};

	return Template->new( $tmpl_config );
}

__END__
