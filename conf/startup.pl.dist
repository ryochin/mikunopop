# 
# should chmod 600 ./startup.pl

use 5.8.8;
use strict;
use warnings "all";
use Carp;
use List::Util qw(first);

BEGIN {
	use Path::Class qw(dir file);
	use Apache2::ServerUtil ();
	use lib dir( Apache2::ServerUtil::server_root() => 'extlib' )->stringify;
	use lib dir( Apache2::ServerUtil::server_root() => 'lib' )->stringify;
}

# mpm
use Apache2::MPM ();
printf STDERR "=> MPM: %s\n", lc Apache2::MPM->show;

# set server limit
if( first { $^O eq $_ } qw(linux) ){
	eval "use Apache2::SizeLimit ();";
	$Apache2::SizeLimit::MAX_PROCESS_SIZE = 128_000;    # 128 MB
	$Apache2::SizeLimit::MIN_SHARE_SIZE = 1_000;
	$Apache2::SizeLimit::MAX_UNSHARED_SIZE = 20_000;
	$Apache2::SizeLimit::CHECK_EVERY_N_REQUESTS = 10;
}

# phase check
my $cnt = Apache2::ServerUtil::restart_count();
if( $cnt == 1 ){
	printf STDERR "Loading 'conf/startup.pl (start)'. \n";
}
elsif( $cnt == 2 ){
	printf STDERR "Loading 'conf/startup.pl (restart: %d)'. \n", $cnt;
#	eval { use Mikunopop::DBI::Schema };
}
else{
	printf STDERR "Loading 'conf/startup.pl (restart: %d)'. \n", $cnt;
	return 1;
}

### Apache

#use ModPerl::MethodLookup;
#ModPerl::MethodLookup::preload_all_modules();    # don't use uder prod env.

use ModPerl::Util ();    # for CORE::GLOBAL::exit
use mod_perl2;

use Apache2::RequestRec ();
use Apache2::RequestIO ();
use Apache2::RequestUtil ();

use Apache2::ServerRec ();
use Apache2::ServerUtil ();
use Apache2::Connection ();
use Apache2::Log ();

use APR::Table ();
use Apache2::Const -compile => qw(:common :log);
use APR::Const -compile => qw(:common);
#use APR::URI ();

#use Apache2::Request ();
#use Apache2::Cookie;
#use Apache2::Upload;

### DBI etc.

#use Apache::DBI;    # before DBI
#$Apache::DBI::DEBUG = 2;

# the alternative for A::DBI
#use Apache::DBI::Cache;
#use Apache::DBI::Cache::mysql;
  
### core utils

use charnames ':full';
require "unicore/To/Upper.pl";
require "unicore/lib/gc_sc/Digit.pl";
require "unicore/lib/gc_sc/SpacePer.pl";
use utf8;
use version;
#use Carp qw(carp croak);
#use CGI 3.08 ();
#eval { CGI->compile(':form') } || CGI->compile(':all');
#use CGI::Cookie;
use Cwd ();
#use Data::Dumper ();
#use DirHandle ();
#use Encode ();
#use Env;
use Exporter;
#use Fatal ();
#use File::Basename ();
#File::Basename::fileparse_set_fstype('Unix');
#use File::Copy ();
#use File::Find ();
#use File::Path ();
#use File::Spec ();
#use File::Spec::Unix ();
#use File::Temp ();
#use FindBin ();
#use IO::Dir ();
#use IO::File ();
use IO::Socket ();
use IO::Socket::INET ();
#use MIME::Base64 ();
#use List::Util 1.18 ();    # avoid memory leaks
#use Safe ();
#use Scalar::Util 1.18 ();
#use Storable ();
#use Switch 'Perl5', 'Perl6';
use Symbol ();
#use Sys::Hostname ();
#use Time::Local ();
#use Time::HiRes ();
#use Time::gmtime ();
#use Time::localtime ();
use UNIVERSAL ();

### utilities

#use only;    # see also 'less'
#use Acme::ManekiNeko;
#use Acme::Void qw(:all);
#use AppConfig qw(:expand :argcount);
#use AppConfig::File;
#use AppConfig::State;
#use BSD::Resource ();
#use Cache::Memcached 1.24;
#use Cache::Memcached::Fast;
#use CLASS;
#use Class::Accessor;
#use Class::Accessor::Fast;
#use Class::Accessor::Faster;
#use Class::C3;
#use Class::Data::Inheritable;
#use Class::ErrorHandler;
#use Class::Inspector;
#use Class::Singleton;
#use Clone ();
#use Clone::Fast ();
#use Compress::Zlib ();
#use Config::Any;
#use Config::Any::General;
#use Config::Any::INI;
#use Config::Any::JSON;
#use Config::Any::Perl;
#use Config::Any::XML;
#use Config::Any::YAML;
#use Config::Multi;
#use Crypt::CBC 2.17;
#use Crypt::Blowfish ();
#use Crypt::Rijndael ();
#use Crypt::Random ();
#use Crypt::Random::Provider::File ();
#use Crypt::Random::Provider::devrandom ();
#use Data::Page;
#use Data::Page::Navigation;
#use Data::SimplePassword ();
#use DateTime 0.41 (); DateTime->now( time_zone => 'local' );
#use DateTime::Format::HTTP;
#use DateTime::Format::Mail;
#use DateTime::Format::MySQL;
#use DateTime::Format::W3CDTF;
#use DateTime::TimeZone::Asia::Tokyo;
#use DateTime::TimeZone::Local::Unix;
#use DateTime::TimeZone::OlsonDB;
#use DBI;
#DBI->install_driver($_) for qw(mysql SQLite);
#use DBIx::Class 0.08009;
#use DBIx::Class::Cursor;
#use DBIx::Class::InflateColumn::DateTime;
#use DBIx::Class::Storage;
#use DBIx::Class::Storage::DBI;
#use DBIx::Class::Storage::DBI::Cursor;
#use DBIx::Class::Storage::DBI::mysql;
#use DBIx::Class::Storage::DBI::MultiDistinctEmulation;
#use DBIx::Class::Storage::DBI::SQLite;
#use DBIx::Class::Storage::Statistics;
#use DBD::Sponge;
#use DBD::mysql::GetInfo;
#use Digest::SHA ();
#use Email::MIME ();
#use Email::MIME::Creator ();
#use Email::Send ();
#use Encode::Guess qw(euc-jp shiftjis 7bit-jis utf8);
#use Encode::Unicode::Japanese ();
#use Error qw(:try);
#use File::Copy::Recursive ();
#use FormValidator::Simple 0.18;    # surpress Spiffy.pm interuption
#use HTTP::BrowserDetect;
#use HTTP::Date ();
#use HTTP::Status ();
#use Jcode 2.00 ();
use JSON::Syck ();
#use List::MoreUtils qw(uniq);
#use Log::Dispatch::Config;
#use Log::Dispatch::Configurator;
#use Log::Dispatch::Configurator::AppConfig;
#use Log::Dispatch::File;
#use Log::Dispatch::Output;
#use NKF ();
#use POSIX;
#use Params::Validate;
#use Params::ValidateXS;
#use Path::Class;
#use Perl6::Junction 1.40000 ();
#use Perl6::Say ();
#use Perl6::Slurp ();
#use Readonly;
#use SQL::Abstract;
#use SQL::Abstract::Limit;
#use String::CRC32 ();
#use Sys::HostIP 1.3.0;    # for admin
#use Template::Filters 2.86;    # means Template 2.19 
#use Template 2.19;    # for url filter
#use Template;
#Template::Config->preload;
#Template->new->process( \ "", {} );
#use Template::Plugin;
#eval {
#	use Template::Plugin::br;
#	use Template::Plugin::dellf;
#	use Template::Plugin::h2z;
#};
#use Template::Plugin::AutoLink;
#use Template::Plugin::Comma;
#use Template::Plugin::Format;
#use Template::Provider::Encoding;
#use Template::Provider::Unicode::Japanese;
#use Template::Stash::ForceUTF8;
#use TheSchwartz 1.04;
#use TheSchwartz::Simple;
#use Time::Seconds;
#use Unicode::Japanese;
#use URI ();
#use URI::_generic;
#use URI::_query;
#use URI::_server;
#use URI::http;
#use URI::Escape ();
#use URI::Escape::XS ();
#use URI::Template ();
#use URI::URL ();
#use Want;
#use YAML ();
#use YAML::Syck 1.00 ();
#use UNIVERSAL::require;

#use Aqua::BrowserDetect::Lite;
#use Aqua::Mailer 0.30;
#use Aqua::Regular;
#use Aqua::ReduceStats;

### project utilities

#use File::MMagic::XS ();
#use MIME::Types ();
#use Imager ();
#use Image::Size ();

### project modules


### devel modules

return 1;

